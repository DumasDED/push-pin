Break the string into constituents:

'Bushwick, Brooklyn, NY' --> ['Bushwick', 'Brooklyn', 'NY']


Starting at the END of the array, search for a state:

data.find_state('NY') --> <Location.NewYork>

- What if it returns two states?
- What if it doesn't return any state?


Once that's been found, take the previous string in the array
and use it to find a city in that state:

state<Location.NewYork>.find_city('Brooklyn') --> <Location.NewYork.Brooklyn>


IF IT CAN'T FIND A STATE:
- Using the first string, search the dataset for matching locations
- Store the matching admin code combinations in an array
- Iterate through the remaining strings:
    - Search the dataset for matching locations
    - Compare admin codes to what is already in the stored array
    - Eliminate any combinations that are not common to the result set
- If the array is reduced to zero, fail
- If the array is reduced to more than one, repeat the process using exact
  matches instead of approximate ones


Need this enum somewhere.

class FeatureClass:
    ADM1 = 1
    ADM2 = 2
    ADM3 = 3
    ADMD = 4
    PPLC = 5
    PPLG = 6
    PPLA = 7
    PPLA2 = 8
    PPLA3 = 9
    PPLA4 = 10
    PPL = 11
    PPLX = 12
    PPLS = 13
    PPLL = 14